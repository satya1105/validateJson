{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonTool() {\n  _s();\n  const [jsonInput, setJsonInput] = useState('');\n  const [error, setError] = useState('');\n  const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n  const handleInputChange = event => {\n    setJsonInput(event.target.value);\n    setError(''); // Clear previous errors when user edits text\n    updateLineNumbers(event.target.value);\n  };\n  const validateJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const formattedJson = JSON.stringify(parsedJson, null, 2);\n      setJsonInput(formattedJson); // Update textarea with formatted JSON\n      updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n      setError('');\n      alert('JSON is valid and has been expanded.');\n    } catch (err) {\n      setError(`Invalid JSON! Error: ${err.message}`);\n    }\n  };\n  const compressJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const compressedJson = JSON.stringify(parsedJson);\n      setJsonInput(compressedJson); // Compress JSON by removing spaces\n      updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n      setError('');\n      alert('JSON has been compressed.');\n    } catch (err) {\n      setError(`Cannot compress JSON! Error: ${err.message}`);\n    }\n  };\n  const clearJson = () => {\n    setJsonInput('');\n    setError('');\n    setLineNumbers('1'); // Reset line numbers\n  };\n\n  // Function to update line numbers based on text content\n  const updateLineNumbers = text => {\n    const lines = text.split('\\n');\n    const newLineNumbers = Array.from({\n      length: lines.length\n    }, (_, i) => i + 1).join('\\n');\n    setLineNumbers(newLineNumbers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: lineNumbers,\n      readOnly: true,\n      style: {\n        width: '50px',\n        height: '300px',\n        overflow: 'hidden',\n        resize: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: jsonInput,\n      onChange: handleInputChange,\n      rows: \"70\",\n      cols: \"170\",\n      placeholder: \"Enter JSON here...\",\n      style: {\n        resize: 'none',\n        marginLeft: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: validateJson,\n        children: \"Validate and Expand JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compressJson,\n        children: \"Compress JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearJson,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonTool, \"RMyr4AjbHO8A7Rr0hBQjt+Idtrs=\");\n_c = JsonTool;\nexport default JsonTool;\nvar _c;\n$RefreshReg$(_c, \"JsonTool\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","JsonTool","_s","jsonInput","setJsonInput","error","setError","lineNumbers","setLineNumbers","handleInputChange","event","target","value","updateLineNumbers","validateJson","parsedJson","JSON","parse","formattedJson","stringify","alert","err","message","compressJson","compressedJson","clearJson","text","lines","split","newLineNumbers","Array","from","length","_","i","join","style","display","flexDirection","children","readOnly","width","height","overflow","resize","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","cols","placeholder","marginLeft","onClick","color","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\nimport React, { useState } from 'react';\n\nfunction JsonTool() {\n    const [jsonInput, setJsonInput] = useState('');\n    const [error, setError] = useState('');\n    const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n    const handleInputChange = (event) => {\n        setJsonInput(event.target.value);\n        setError(''); // Clear previous errors when user edits text\n        updateLineNumbers(event.target.value);\n    };\n\n    const validateJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const formattedJson = JSON.stringify(parsedJson, null, 2);\n            setJsonInput(formattedJson); // Update textarea with formatted JSON\n            updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n            setError('');\n            alert('JSON is valid and has been expanded.');\n        } catch (err) {\n            setError(`Invalid JSON! Error: ${err.message}`);\n        }\n    };\n\n    const compressJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const compressedJson = JSON.stringify(parsedJson);\n            setJsonInput(compressedJson); // Compress JSON by removing spaces\n            updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n            setError('');\n            alert('JSON has been compressed.');\n        } catch (err) {\n            setError(`Cannot compress JSON! Error: ${err.message}`);\n        }\n    };\n\n    const clearJson = () => {\n        setJsonInput('');\n        setError('');\n        setLineNumbers('1'); // Reset line numbers\n    };\n\n    // Function to update line numbers based on text content\n    const updateLineNumbers = (text) => {\n        const lines = text.split('\\n');\n        const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n        setLineNumbers(newLineNumbers);\n    };\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n            <textarea\n                value={lineNumbers}\n                readOnly\n                style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n            />\n            <textarea\n                value={jsonInput}\n                onChange={handleInputChange}\n                rows=\"70\"\n                cols=\"170\"\n                placeholder=\"Enter JSON here...\"\n                style={{ resize: 'none', marginLeft: '5px' }}\n            />\n            <div>\n                <button onClick={validateJson}>Validate and Expand JSON</button>\n                <button onClick={compressJson}>Compress JSON</button>\n                <button onClick={clearJson}>Clear</button>\n            </div>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n        </div>\n    );\n}\n\nexport default JsonTool;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}