{"ast":null,"code":"// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {/* <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div> */}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//2222\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;","map":{"version":3,"names":[],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {/* <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div> */}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//2222\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}