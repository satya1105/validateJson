{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {/* <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div> */}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//2222\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonTool() {\n  _s();\n  const [jsonInput, setJsonInput] = useState('');\n  const [error, setError] = useState('');\n  const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n  const [historyVisible, setHistoryVisible] = useState(false);\n  const [history, setHistory] = useState(() => JSON.parse(sessionStorage.getItem('jsonHistory')) || []);\n  const textareaRef = useRef(null);\n  const lineNumbersRef = useRef(null);\n  const handleInputChange = event => {\n    setJsonInput(event.target.value);\n    setError(''); // Clear previous errors when user edits text\n    updateLineNumbers(event.target.value);\n  };\n  const validateJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const formattedJson = JSON.stringify(parsedJson, null, 2);\n      setJsonInput(formattedJson); // Update textarea with formatted JSON\n      updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n      updateHistory(formattedJson); // Save to history\n      setError('');\n      alert('JSON is valid and has been expanded.');\n    } catch (err) {\n      setError(`Invalid JSON! Error: ${err.message}`);\n    }\n  };\n  const compressJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const compressedJson = JSON.stringify(parsedJson);\n      setJsonInput(compressedJson); // Compress JSON by removing spaces\n      updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n      updateHistory(compressedJson); // Save to history\n      setError('');\n      alert('JSON has been compressed.');\n    } catch (err) {\n      setError(`Cannot compress JSON! Error: ${err.message}`);\n    }\n  };\n  const clearJson = () => {\n    setJsonInput('');\n    setError('');\n    setLineNumbers('1'); // Reset line numbers\n  };\n  const updateLineNumbers = text => {\n    const lines = text.split('\\n');\n    const newLineNumbers = lines.map((_, index) => index + 1).join('\\n');\n    setLineNumbers(newLineNumbers);\n    if (lineNumbersRef.current) {\n      lineNumbersRef.current.scrollTop = textareaRef.current.scrollTop;\n    }\n  };\n  const handleScroll = () => {\n    lineNumbersRef.current.scrollTop = textareaRef.current.scrollTop;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'right',\n        marginRight: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: lineNumbersRef,\n        value: lineNumbers,\n        readOnly: true,\n        style: {\n          width: '40px',\n          height: '162px',\n          // Match textarea height\n          overflow: 'hidden',\n          resize: 'none',\n          background: '#f0f0f0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      value: jsonInput,\n      onChange: handleInputChange,\n      onScroll: handleScroll,\n      rows: \"10\",\n      cols: \"50\",\n      placeholder: \"Enter JSON here...\",\n      style: {\n        resize: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: validateJson,\n        children: \"Validate and Expand JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compressJson,\n        children: \"Compress JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearJson,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleHistory,\n        children: historyVisible ? 'Hide History' : 'Show History'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 23\n    }, this), historyVisible && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [entry.timestamp, \": \", entry.json]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 512,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonTool, \"xT4DmJV8NT+N4XKAT7THUxuOmSw=\");\n_c = JsonTool;\nexport default JsonTool;\nvar _c;\n$RefreshReg$(_c, \"JsonTool\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","JsonTool","_s","jsonInput","setJsonInput","error","setError","lineNumbers","setLineNumbers","historyVisible","setHistoryVisible","history","setHistory","JSON","parse","sessionStorage","getItem","textareaRef","lineNumbersRef","handleInputChange","event","target","value","updateLineNumbers","validateJson","parsedJson","formattedJson","stringify","updateHistory","alert","err","message","compressJson","compressedJson","clearJson","text","lines","split","newLineNumbers","map","_","index","join","current","scrollTop","handleScroll","style","display","children","textAlign","marginRight","ref","readOnly","width","height","overflow","resize","background","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onScroll","rows","cols","placeholder","onClick","toggleHistory","color","entry","timestamp","json","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {/* <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div> */}\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//2222\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\nimport React, { useState, useRef } from 'react';\n\nfunction JsonTool() {\n    const [jsonInput, setJsonInput] = useState('');\n    const [error, setError] = useState('');\n    const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n    const [historyVisible, setHistoryVisible] = useState(false);\n    const [history, setHistory] = useState(\n        () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n    );\n    const textareaRef = useRef(null);\n    const lineNumbersRef = useRef(null);\n\n    const handleInputChange = (event) => {\n        setJsonInput(event.target.value);\n        setError(''); // Clear previous errors when user edits text\n        updateLineNumbers(event.target.value);\n    };\n\n    const validateJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const formattedJson = JSON.stringify(parsedJson, null, 2);\n            setJsonInput(formattedJson); // Update textarea with formatted JSON\n            updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n            updateHistory(formattedJson); // Save to history\n            setError('');\n            alert('JSON is valid and has been expanded.');\n        } catch (err) {\n            setError(`Invalid JSON! Error: ${err.message}`);\n        }\n    };\n\n    const compressJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const compressedJson = JSON.stringify(parsedJson);\n            setJsonInput(compressedJson); // Compress JSON by removing spaces\n            updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n            updateHistory(compressedJson); // Save to history\n            setError('');\n            alert('JSON has been compressed.');\n        } catch (err) {\n            setError(`Cannot compress JSON! Error: ${err.message}`);\n        }\n    };\n\n    const clearJson = () => {\n        setJsonInput('');\n        setError('');\n        setLineNumbers('1'); // Reset line numbers\n    };\n\n    const updateLineNumbers = (text) => {\n        const lines = text.split('\\n');\n        const newLineNumbers = lines.map((_, index) => index + 1).join('\\n');\n        setLineNumbers(newLineNumbers);\n        if (lineNumbersRef.current) {\n            lineNumbersRef.current.scrollTop = textareaRef.current.scrollTop;\n        }\n    };\n\n    const handleScroll = () => {\n        lineNumbersRef.current.scrollTop = textareaRef.current.scrollTop;\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ textAlign: 'right', marginRight: '10px' }}>\n                <textarea\n                    ref={lineNumbersRef}\n                    value={lineNumbers}\n                    readOnly\n                    style={{\n                        width: '40px',\n                        height: '162px', // Match textarea height\n                        overflow: 'hidden',\n                        resize: 'none',\n                        background: '#f0f0f0'\n                    }}\n                />\n            </div>\n            <textarea\n                ref={textareaRef}\n                value={jsonInput}\n                onChange={handleInputChange}\n                onScroll={handleScroll}\n                rows=\"10\"\n                cols=\"50\"\n                placeholder=\"Enter JSON here...\"\n                style={{\n                    resize: 'none'\n                }}\n            />\n            <div>\n                <button onClick={validateJson}>Validate and Expand JSON</button>\n                <button onClick={compressJson}>Compress JSON</button>\n                <button onClick={clearJson}>Clear</button>\n                <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n            </div>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            {historyVisible && (\n                <ul>\n                    {history.map((entry, index) => (\n                        <li key={index}>{entry.timestamp}: {entry.json}</li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n}\n\nexport default JsonTool;\n\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACrD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}