{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n// 222\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//3333\n\n// import React, { useState } from 'react';\n// import mammoth from 'mammoth';\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             mammoth.extractRawText({ arrayBuffer: file.slice() })\n//                 .then(result => {\n//                     setter(result.value);  // Set the extracted text in the textarea\n//                 })\n//                 .catch(err => {\n//                     setter(`Error reading file: ${err.message}`);\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Upload and Display Word Document</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n// 44444\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 console.log(\"File read successfully: \", e.target.result.substring(0, 100)); // Log first 100 characters of the file\n//                 setter(e.target.result);\n//             };\n//             reader.onerror = (error) => {\n//                 console.error(\"Error reading file: \", error);\n//                 setter(\"Failed to read file.\");\n//             };\n//             reader.readAsText(file);\n//         } else {\n//             console.log(\"No file chosen or file read was aborted.\");\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n//55555\n\n// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//6666\n\nimport React, { useState } from 'react';\nimport { diffLines, diffJson } from 'diff'; // Importing diff functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonComparator() {\n  _s();\n  const [inputOne, setInputOne] = useState('');\n  const [inputTwo, setInputTwo] = useState('');\n  const [differences, setDifferences] = useState(null);\n  const handleInputOneChange = event => {\n    setInputOne(event.target.value);\n  };\n  const handleInputTwoChange = event => {\n    setInputTwo(event.target.value);\n  };\n  const compareInputs = () => {\n    // Attempt JSON comparison first\n    try {\n      const jsonOne = JSON.parse(inputOne);\n      const jsonTwo = JSON.parse(inputTwo);\n      const diff = diffJson(jsonOne, jsonTwo);\n      if (diff.length === 1 && !diff[0].added && !diff[0].removed) {\n        setDifferences('No differences found.');\n      } else {\n        const formattedDiff = diff.map((part, index) => {\n          const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: color\n            },\n            children: part.value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 28\n          }, this);\n        });\n        setDifferences( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: formattedDiff\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 32\n        }, this));\n      }\n    } catch {\n      // Fallback to plain text comparison if JSON fails\n      const diff = diffLines(inputOne, inputTwo);\n      if (diff.length === 1 && !diff[0].added && !diff[0].removed) {\n        setDifferences('No differences found.');\n      } else {\n        const formattedDiff = diff.map((part, index) => {\n          const color = part.added ? 'green' : part.removed ? 'red' : 'black';\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: color\n            },\n            children: part.value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 28\n          }, this);\n        });\n        setDifferences( /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: formattedDiff\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 32\n        }, this));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Find Differences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputOne,\n      onChange: handleInputOneChange,\n      rows: \"10\",\n      cols: \"50\",\n      placeholder: \"Paste file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputTwo,\n      onChange: handleInputTwoChange,\n      rows: \"10\",\n      cols: \"50\",\n      placeholder: \"Paste file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compareInputs,\n        children: \"Compare\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Differences:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), differences || /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No differences detected or input is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonComparator, \"0+ym/ORVdwMAsDbmmpoPLjko8GI=\");\n_c = JsonComparator;\nexport default JsonComparator;\nvar _c;\n$RefreshReg$(_c, \"JsonComparator\");","map":{"version":3,"names":["React","useState","diffLines","diffJson","jsxDEV","_jsxDEV","JsonComparator","_s","inputOne","setInputOne","inputTwo","setInputTwo","differences","setDifferences","handleInputOneChange","event","target","value","handleInputTwoChange","compareInputs","jsonOne","JSON","parse","jsonTwo","diff","length","added","removed","formattedDiff","map","part","index","color","style","children","fileName","_jsxFileName","lineNumber","columnNumber","whiteSpace","onChange","rows","cols","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n// 222\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//3333\n\n// import React, { useState } from 'react';\n// import mammoth from 'mammoth';\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             mammoth.extractRawText({ arrayBuffer: file.slice() })\n//                 .then(result => {\n//                     setter(result.value);  // Set the extracted text in the textarea\n//                 })\n//                 .catch(err => {\n//                     setter(`Error reading file: ${err.message}`);\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Upload and Display Word Document</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n// 44444\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 console.log(\"File read successfully: \", e.target.result.substring(0, 100)); // Log first 100 characters of the file\n//                 setter(e.target.result);\n//             };\n//             reader.onerror = (error) => {\n//                 console.error(\"Error reading file: \", error);\n//                 setter(\"Failed to read file.\");\n//             };\n//             reader.readAsText(file);\n//         } else {\n//             console.log(\"No file chosen or file read was aborted.\");\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n//55555\n\n// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//6666\n\nimport React, { useState } from 'react';\nimport { diffLines, diffJson } from 'diff';  // Importing diff functions\n\nfunction JsonComparator() {\n    const [inputOne, setInputOne] = useState('');\n    const [inputTwo, setInputTwo] = useState('');\n    const [differences, setDifferences] = useState(null);\n\n    const handleInputOneChange = (event) => {\n        setInputOne(event.target.value);\n    };\n\n    const handleInputTwoChange = (event) => {\n        setInputTwo(event.target.value);\n    };\n\n    const compareInputs = () => {\n        // Attempt JSON comparison first\n        try {\n            const jsonOne = JSON.parse(inputOne);\n            const jsonTwo = JSON.parse(inputTwo);\n            const diff = diffJson(jsonOne, jsonTwo);\n            if (diff.length === 1 && !diff[0].added && !diff[0].removed) {\n                setDifferences('No differences found.');\n            } else {\n                const formattedDiff = diff.map((part, index) => {\n                    const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n                    return <span key={index} style={{ color: color }}>{part.value}</span>;\n                });\n                setDifferences(<div>{formattedDiff}</div>);\n            }\n        } catch {\n            // Fallback to plain text comparison if JSON fails\n            const diff = diffLines(inputOne, inputTwo);\n            if (diff.length === 1 && !diff[0].added && !diff[0].removed) {\n                setDifferences('No differences found.');\n            } else {\n                const formattedDiff = diff.map((part, index) => {\n                    const color = part.added ? 'green' : part.removed ? 'red' : 'black';\n                    return <span key={index} style={{ color: color }}>{part.value}</span>;\n                });\n                setDifferences(<div style={{ whiteSpace: 'pre-wrap' }}>{formattedDiff}</div>);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h1>Find Differences</h1>\n            <textarea\n                value={inputOne}\n                onChange={handleInputOneChange}\n                rows=\"10\"\n                cols=\"50\"\n                placeholder=\"Paste file\"\n            />\n            <textarea\n                value={inputTwo}\n                onChange={handleInputTwoChange}\n                rows=\"10\"\n                cols=\"50\"\n                placeholder=\"Paste file\"\n            />\n            <div>\n                <button onClick={compareInputs}>Compare</button>\n            </div>\n            <div>\n                <h2>Differences:</h2>\n                {differences || <p>No differences detected or input is empty.</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default JsonComparator;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}