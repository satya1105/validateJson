{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\nimport React, { useState } from 'react';\nimport mammoth from 'mammoth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonComparator() {\n  _s();\n  const [inputOne, setInputOne] = useState('');\n  const [inputTwo, setInputTwo] = useState('');\n  const handleFileChange = (event, setter) => {\n    const file = event.target.files[0];\n    if (file) {\n      mammoth.extractRawText({\n        arrayBuffer: file.slice()\n      }).then(result => {\n        setter(result.value); // Set the extracted text in the textarea\n      }).catch(err => {\n        setter(`Error reading file: ${err.message}`);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload and Display Word Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => handleFileChange(e, setInputOne),\n        accept: \".docx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputOne,\n        onChange: e => setInputOne(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Text from the uploaded document will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => handleFileChange(e, setInputTwo),\n        accept: \".docx\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputTwo,\n        onChange: e => setInputTwo(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Text from the uploaded document will appear here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonComparator, \"UcHawgVt155z5GVMutNKHJDsRy0=\");\n_c = JsonComparator;\nexport default JsonComparator;\nvar _c;\n$RefreshReg$(_c, \"JsonComparator\");","map":{"version":3,"names":["React","useState","mammoth","jsxDEV","_jsxDEV","JsonComparator","_s","inputOne","setInputOne","inputTwo","setInputTwo","handleFileChange","event","setter","file","target","files","extractRawText","arrayBuffer","slice","then","result","value","catch","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","accept","rows","cols","placeholder","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\nimport React, { useState } from 'react';\nimport mammoth from 'mammoth';\n\nfunction JsonComparator() {\n    const [inputOne, setInputOne] = useState('');\n    const [inputTwo, setInputTwo] = useState('');\n\n    const handleFileChange = (event, setter) => {\n        const file = event.target.files[0];\n        if (file) {\n            mammoth.extractRawText({ arrayBuffer: file.slice() })\n                .then(result => {\n                    setter(result.value);  // Set the extracted text in the textarea\n                })\n                .catch(err => {\n                    setter(`Error reading file: ${err.message}`);\n                });\n        }\n    };\n\n    return (\n        <div>\n            <h1>Upload and Display Word Document</h1>\n            <div>\n                <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} accept=\".docx\" />\n                <textarea\n                    value={inputOne}\n                    onChange={e => setInputOne(e.target.value)}\n                    rows=\"10\"\n                    cols=\"50\"\n                    placeholder=\"Text from the uploaded document will appear here...\"\n                />\n            </div>\n            <div>\n                <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} accept=\".docx\" />\n                <textarea\n                    value={inputTwo}\n                    onChange={e => setInputTwo(e.target.value)}\n                    rows=\"10\"\n                    cols=\"50\"\n                    placeholder=\"Text from the uploaded document will appear here...\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default JsonComparator;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;IACxC,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACNZ,OAAO,CAACe,cAAc,CAAC;QAAEC,WAAW,EAAEJ,IAAI,CAACK,KAAK,CAAC;MAAE,CAAC,CAAC,CAChDC,IAAI,CAACC,MAAM,IAAI;QACZR,MAAM,CAACQ,MAAM,CAACC,KAAK,CAAC,CAAC,CAAE;MAC3B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;QACVX,MAAM,CAAE,uBAAsBW,GAAG,CAACC,OAAQ,EAAC,CAAC;MAChD,CAAC,CAAC;IACV;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAAsB,QAAA,gBACItB,OAAA;MAAAsB,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzC1B,OAAA;MAAAsB,QAAA,gBACItB,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAGC,CAAC,IAAKtB,gBAAgB,CAACsB,CAAC,EAAEzB,WAAW,CAAE;QAAC0B,MAAM,EAAC;MAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvF1B,OAAA;QACIkB,KAAK,EAAEf,QAAS;QAChByB,QAAQ,EAAEC,CAAC,IAAIzB,WAAW,CAACyB,CAAC,CAAClB,MAAM,CAACO,KAAK,CAAE;QAC3Ca,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,IAAI;QACTC,WAAW,EAAC;MAAqD;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN1B,OAAA;MAAAsB,QAAA,gBACItB,OAAA;QAAO2B,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAGC,CAAC,IAAKtB,gBAAgB,CAACsB,CAAC,EAAEvB,WAAW,CAAE;QAACwB,MAAM,EAAC;MAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvF1B,OAAA;QACIkB,KAAK,EAAEb,QAAS;QAChBuB,QAAQ,EAAEC,CAAC,IAAIvB,WAAW,CAACuB,CAAC,CAAClB,MAAM,CAACO,KAAK,CAAE;QAC3Ca,IAAI,EAAC,IAAI;QACTC,IAAI,EAAC,IAAI;QACTC,WAAW,EAAC;MAAqD;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CA1CQD,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AA4CvB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}