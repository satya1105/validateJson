{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n// 222\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//3333\n\n// import React, { useState } from 'react';\n// import mammoth from 'mammoth';\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             mammoth.extractRawText({ arrayBuffer: file.slice() })\n//                 .then(result => {\n//                     setter(result.value);  // Set the extracted text in the textarea\n//                 })\n//                 .catch(err => {\n//                     setter(`Error reading file: ${err.message}`);\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Upload and Display Word Document</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\nimport React, { useState } from 'react';\nimport { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonComparator() {\n  _s();\n  const [inputOne, setInputOne] = useState('');\n  const [inputTwo, setInputTwo] = useState('');\n  const [differences, setDifferences] = useState('');\n  const handleFileChange = (event, setter) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        console.log(\"File read successfully: \", e.target.result.substring(0, 100)); // Log first 100 characters of the file\n        setter(e.target.result);\n      };\n      reader.onerror = error => {\n        console.error(\"Error reading file: \", error);\n        setter(\"Failed to read file.\");\n      };\n      reader.readAsText(file);\n    } else {\n      console.log(\"No file chosen or file read was aborted.\");\n    }\n  };\n  const compareByLine = () => {\n    const diff = diffLines(inputOne, inputTwo);\n    formatDiff(diff);\n  };\n  const compareByWord = () => {\n    const diff = diffWordsWithSpace(inputOne, inputTwo);\n    formatDiff(diff);\n  };\n  const formatDiff = diff => {\n    const formattedDiff = diff.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: part.added ? 'green' : part.removed ? 'red' : 'black'\n      },\n      children: part.value\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this));\n    setDifferences(formattedDiff);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Compare JSON/Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => handleFileChange(e, setInputOne)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputOne,\n        onChange: e => setInputOne(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Enter or upload JSON/code...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => handleFileChange(e, setInputTwo)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputTwo,\n        onChange: e => setInputTwo(e.target.value),\n        rows: \"10\",\n        cols: \"50\",\n        placeholder: \"Enter or upload JSON/code...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compareByLine,\n        children: \"Compare by Line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compareByWord,\n        children: \"Compare by Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Differences:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: differences\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonComparator, \"brfdNdYYBHyYk5mehcS1X7PdRyE=\");\n_c = JsonComparator;\nexport default JsonComparator;\nvar _c;\n$RefreshReg$(_c, \"JsonComparator\");","map":{"version":3,"names":["React","useState","diffWordsWithSpace","diffLines","jsxDEV","_jsxDEV","JsonComparator","_s","inputOne","setInputOne","inputTwo","setInputTwo","differences","setDifferences","handleFileChange","event","setter","file","target","files","reader","FileReader","onload","e","console","log","result","substring","onerror","error","readAsText","compareByLine","diff","formatDiff","compareByWord","formattedDiff","map","part","index","style","color","added","removed","children","value","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","rows","cols","placeholder","onClick","whiteSpace","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonComparator.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { diffLines, diffJson } from 'diff';  // Importing diff functions\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleInputOneChange = (event) => {\n//         setInputOne(event.target.value);\n//     };\n\n//     const handleInputTwoChange = (event) => {\n//         setInputTwo(event.target.value);\n//     };\n\n//     const compareJson = () => {\n//         try {\n//             const jsonOne = JSON.parse(inputOne);\n//             const jsonTwo = JSON.parse(inputTwo);\n//             const diff = diffJson(jsonOne, jsonTwo);\n//             const formattedDiff = diff.map(part => {\n//                 const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//                 return <span style={{ color: color }}>{part.value}</span>;\n//             });\n//             setDifferences(formattedDiff);\n//         } catch (error) {\n//             setDifferences(<p style={{ color: 'red' }}>Error parsing JSON: {error.message}</p>);\n//         }\n//     };\n\n//     const compareText = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         const formattedDiff = diff.map(part => {\n//             const color = part.added ? 'green' : part.removed ? 'red' : 'grey';\n//             return <span style={{ color: color }}>{part.value}</span>;\n//         });\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON/Code Comparator</h1>\n//             <textarea\n//                 value={inputOne}\n//                 onChange={handleInputOneChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <textarea\n//                 value={inputTwo}\n//                 onChange={handleInputTwoChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON or code...\"\n//             />\n//             <div>\n//                 <button onClick={compareJson}>Compare JSON</button>\n//                 <button onClick={compareText}>Compare Text</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 {differences}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n// 222\n// import React, { useState } from 'react';\n// import { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n//     const [differences, setDifferences] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 setter(e.target.result);\n//             };\n//             reader.readAsText(file);\n//         }\n//     };\n\n//     const compareByLine = () => {\n//         const diff = diffLines(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const compareByWord = () => {\n//         const diff = diffWordsWithSpace(inputOne, inputTwo);\n//         formatDiff(diff);\n//     };\n\n//     const formatDiff = (diff) => {\n//         const formattedDiff = diff.map((part, index) => (\n//             <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n//                 {part.value}\n//             </span>\n//         ));\n//         setDifferences(formattedDiff);\n//     };\n\n//     return (\n//         <div>\n//             <h1>Compare JSON/Code</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Enter or upload JSON/code...\"\n//                 />\n//             </div>\n//             <div>\n//                 <button onClick={compareByLine}>Compare by Line</button>\n//                 <button onClick={compareByWord}>Compare by Word</button>\n//             </div>\n//             <div>\n//                 <h2>Differences:</h2>\n//                 <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n//3333\n\n// import React, { useState } from 'react';\n// import mammoth from 'mammoth';\n\n// function JsonComparator() {\n//     const [inputOne, setInputOne] = useState('');\n//     const [inputTwo, setInputTwo] = useState('');\n\n//     const handleFileChange = (event, setter) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             mammoth.extractRawText({ arrayBuffer: file.slice() })\n//                 .then(result => {\n//                     setter(result.value);  // Set the extracted text in the textarea\n//                 })\n//                 .catch(err => {\n//                     setter(`Error reading file: ${err.message}`);\n//                 });\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Upload and Display Word Document</h1>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputOne}\n//                     onChange={e => setInputOne(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//             <div>\n//                 <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} accept=\".docx\" />\n//                 <textarea\n//                     value={inputTwo}\n//                     onChange={e => setInputTwo(e.target.value)}\n//                     rows=\"10\"\n//                     cols=\"50\"\n//                     placeholder=\"Text from the uploaded document will appear here...\"\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default JsonComparator;\n\n\nimport React, { useState } from 'react';\nimport { diffWordsWithSpace, diffLines } from 'diff'; // Functions for word and line diff\n\nfunction JsonComparator() {\n    const [inputOne, setInputOne] = useState('');\n    const [inputTwo, setInputTwo] = useState('');\n    const [differences, setDifferences] = useState('');\n\n    const handleFileChange = (event, setter) => {\n        const file = event.target.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                console.log(\"File read successfully: \", e.target.result.substring(0, 100)); // Log first 100 characters of the file\n                setter(e.target.result);\n            };\n            reader.onerror = (error) => {\n                console.error(\"Error reading file: \", error);\n                setter(\"Failed to read file.\");\n            };\n            reader.readAsText(file);\n        } else {\n            console.log(\"No file chosen or file read was aborted.\");\n        }\n    };\n\n    const compareByLine = () => {\n        const diff = diffLines(inputOne, inputTwo);\n        formatDiff(diff);\n    };\n\n    const compareByWord = () => {\n        const diff = diffWordsWithSpace(inputOne, inputTwo);\n        formatDiff(diff);\n    };\n\n    const formatDiff = (diff) => {\n        const formattedDiff = diff.map((part, index) => (\n            <span key={index} style={{ color: part.added ? 'green' : part.removed ? 'red' : 'black' }}>\n                {part.value}\n            </span>\n        ));\n        setDifferences(formattedDiff);\n    };\n\n    return (\n        <div>\n            <h1>Compare JSON/Code</h1>\n            <div>\n                <input type=\"file\" onChange={(e) => handleFileChange(e, setInputOne)} />\n                <textarea\n                    value={inputOne}\n                    onChange={e => setInputOne(e.target.value)}\n                    rows=\"10\"\n                    cols=\"50\"\n                    placeholder=\"Enter or upload JSON/code...\"\n                />\n            </div>\n            <div>\n                <input type=\"file\" onChange={(e) => handleFileChange(e, setInputTwo)} />\n                <textarea\n                    value={inputTwo}\n                    onChange={e => setInputTwo(e.target.value)}\n                    rows=\"10\"\n                    cols=\"50\"\n                    placeholder=\"Enter or upload JSON/code...\"\n                />\n            </div>\n            <div>\n                <button onClick={compareByLine}>Compare by Line</button>\n                <button onClick={compareByWord}>Compare by Word</button>\n            </div>\n            <div>\n                <h2>Differences:</h2>\n                <div style={{ whiteSpace: 'pre-wrap' }}>{differences}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default JsonComparator;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,EAAEC,SAAS,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}