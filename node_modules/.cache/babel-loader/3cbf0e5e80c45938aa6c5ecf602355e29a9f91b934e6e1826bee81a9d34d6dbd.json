{"ast":null,"code":"var _jsxFileName = \"/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsonTool() {\n  _s();\n  const [jsonInput, setJsonInput] = useState('');\n  const [error, setError] = useState('');\n  const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n  const [historyVisible, setHistoryVisible] = useState(false);\n  const [history, setHistory] = useState(() => JSON.parse(sessionStorage.getItem('jsonHistory')) || []);\n  const handleInputChange = event => {\n    setJsonInput(event.target.value);\n    setError(''); // Clear previous errors when user edits text\n    updateLineNumbers(event.target.value);\n  };\n  const validateJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const formattedJson = JSON.stringify(parsedJson, null, 2);\n      setJsonInput(formattedJson); // Update textarea with formatted JSON\n      updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n      updateHistory(formattedJson); // Save to history\n      setError('');\n      alert('JSON is valid and has been expanded.');\n    } catch (err) {\n      setError(`Invalid JSON! Error: ${err.message}`);\n    }\n  };\n  const compressJson = () => {\n    try {\n      const parsedJson = JSON.parse(jsonInput);\n      const compressedJson = JSON.stringify(parsedJson);\n      setJsonInput(compressedJson); // Compress JSON by removing spaces\n      updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n      updateHistory(compressedJson); // Save to history\n      setError('');\n      alert('JSON has been compressed.');\n    } catch (err) {\n      setError(`Cannot compress JSON! Error: ${err.message}`);\n    }\n  };\n  const clearJson = () => {\n    setJsonInput('');\n    setError('');\n    setLineNumbers('1'); // Reset line numbers\n  };\n  const updateLineNumbers = text => {\n    const lines = text.split('\\n');\n    const newLineNumbers = Array.from({\n      length: lines.length\n    }, (_, i) => i + 1).join('\\n');\n    setLineNumbers(newLineNumbers);\n  };\n  const updateHistory = json => {\n    const newEntry = {\n      json,\n      timestamp: new Date().toLocaleString()\n    };\n    const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n    setHistory(newHistory);\n    sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n  };\n  const toggleHistory = () => {\n    setHistoryVisible(!historyVisible);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"JSON Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: validateJson,\n        children: \"Validate and Expand JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compressJson,\n        children: \"Compress JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearJson,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleHistory,\n        children: historyVisible ? 'Hide History' : 'Show History'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: jsonInput,\n      onChange: handleInputChange,\n      rows: \"10\",\n      cols: \"50\",\n      placeholder: \"Enter JSON here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 23\n    }, this), historyVisible && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [entry.timestamp, \": \", entry.json]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 9\n  }, this);\n}\n_s(JsonTool, \"tgSi8Y5oifpXRTsVImcPBzPYxeM=\");\n_c = JsonTool;\nexport default JsonTool;\nvar _c;\n$RefreshReg$(_c, \"JsonTool\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","JsonTool","_s","jsonInput","setJsonInput","error","setError","lineNumbers","setLineNumbers","historyVisible","setHistoryVisible","history","setHistory","JSON","parse","sessionStorage","getItem","handleInputChange","event","target","value","updateLineNumbers","validateJson","parsedJson","formattedJson","stringify","updateHistory","alert","err","message","compressJson","compressedJson","clearJson","text","lines","split","newLineNumbers","Array","from","length","_","i","join","json","newEntry","timestamp","Date","toLocaleString","newHistory","slice","setItem","toggleHistory","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","rows","cols","placeholder","style","color","map","entry","index","_c","$RefreshReg$"],"sources":["/Users/satyaranjan/Desktop/react/jsonvalidator/src/JsonTool.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             // Format JSON with 2 spaces indentation\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             setJsonInput(JSON.stringify(parsedJson)); // Compress JSON by removing spaces\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     // Function to update line numbers based on text content\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     return (\n//         <div style={{ display: 'flex', flexDirection: 'row' }}>\n//             <textarea\n//                 value={lineNumbers}\n//                 readOnly\n//                 style={{ width: '50px', height: '300px', overflow: 'hidden', resize: 'none' }}\n//             />\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"70\"\n//                 cols=\"170\"\n//                 placeholder=\"Enter JSON here...\"\n//                 style={{ resize: 'none', marginLeft: '5px' }}\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n//11111\n\n\n// import React, { useState } from 'react';\n\n// function JsonTool() {\n//     const [jsonInput, setJsonInput] = useState('');\n//     const [error, setError] = useState('');\n//     const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n//     const [historyVisible, setHistoryVisible] = useState(false);\n//     const [history, setHistory] = useState(\n//         () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n//     );\n\n//     const handleInputChange = (event) => {\n//         setJsonInput(event.target.value);\n//         setError(''); // Clear previous errors when user edits text\n//         updateLineNumbers(event.target.value);\n//     };\n\n//     const validateJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const formattedJson = JSON.stringify(parsedJson, null, 2);\n//             setJsonInput(formattedJson); // Update textarea with formatted JSON\n//             updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n//             updateHistory(formattedJson); // Save to history\n//             setError('');\n//             alert('JSON is valid and has been expanded.');\n//         } catch (err) {\n//             setError(`Invalid JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const compressJson = () => {\n//         try {\n//             const parsedJson = JSON.parse(jsonInput);\n//             const compressedJson = JSON.stringify(parsedJson);\n//             setJsonInput(compressedJson); // Compress JSON by removing spaces\n//             updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n//             updateHistory(compressedJson); // Save to history\n//             setError('');\n//             alert('JSON has been compressed.');\n//         } catch (err) {\n//             setError(`Cannot compress JSON! Error: ${err.message}`);\n//         }\n//     };\n\n//     const clearJson = () => {\n//         setJsonInput('');\n//         setError('');\n//         setLineNumbers('1'); // Reset line numbers\n//     };\n\n//     const updateLineNumbers = (text) => {\n//         const lines = text.split('\\n');\n//         const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n//         setLineNumbers(newLineNumbers);\n//     };\n\n//     const updateHistory = (json) => {\n//         const newEntry = { json, timestamp: new Date().toLocaleString() };\n//         const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n//         setHistory(newHistory);\n//         sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n//     };\n\n//     const toggleHistory = () => {\n//         setHistoryVisible(!historyVisible);\n//     };\n\n//     return (\n//         <div>\n//             <h1>JSON Tool</h1>\n//             <textarea\n//                 value={jsonInput}\n//                 onChange={handleInputChange}\n//                 rows=\"10\"\n//                 cols=\"50\"\n//                 placeholder=\"Enter JSON here...\"\n//             />\n//             <div>\n//                 <button onClick={validateJson}>Validate and Expand JSON</button>\n//                 <button onClick={compressJson}>Compress JSON</button>\n//                 <button onClick={clearJson}>Clear</button>\n//                 <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n//             </div>\n//             {error && <p style={{ color: 'red' }}>{error}</p>}\n//             {historyVisible && (\n//                 <ul>\n//                     {history.map((entry, index) => (\n//                         <li key={index}>{entry.timestamp}: {entry.json}</li>\n//                     ))}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default JsonTool;\n\n\nimport React, { useState } from 'react';\n\nfunction JsonTool() {\n    const [jsonInput, setJsonInput] = useState('');\n    const [error, setError] = useState('');\n    const [lineNumbers, setLineNumbers] = useState('1'); // Start with line number 1\n    const [historyVisible, setHistoryVisible] = useState(false);\n    const [history, setHistory] = useState(\n        () => JSON.parse(sessionStorage.getItem('jsonHistory')) || []\n    );\n\n    const handleInputChange = (event) => {\n        setJsonInput(event.target.value);\n        setError(''); // Clear previous errors when user edits text\n        updateLineNumbers(event.target.value);\n    };\n\n    const validateJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const formattedJson = JSON.stringify(parsedJson, null, 2);\n            setJsonInput(formattedJson); // Update textarea with formatted JSON\n            updateLineNumbers(formattedJson); // Update line numbers based on formatted JSON\n            updateHistory(formattedJson); // Save to history\n            setError('');\n            alert('JSON is valid and has been expanded.');\n        } catch (err) {\n            setError(`Invalid JSON! Error: ${err.message}`);\n        }\n    };\n\n    const compressJson = () => {\n        try {\n            const parsedJson = JSON.parse(jsonInput);\n            const compressedJson = JSON.stringify(parsedJson);\n            setJsonInput(compressedJson); // Compress JSON by removing spaces\n            updateLineNumbers(compressedJson); // Update line numbers for compressed JSON\n            updateHistory(compressedJson); // Save to history\n            setError('');\n            alert('JSON has been compressed.');\n        } catch (err) {\n            setError(`Cannot compress JSON! Error: ${err.message}`);\n        }\n    };\n\n    const clearJson = () => {\n        setJsonInput('');\n        setError('');\n        setLineNumbers('1'); // Reset line numbers\n    };\n\n    const updateLineNumbers = (text) => {\n        const lines = text.split('\\n');\n        const newLineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1).join('\\n');\n        setLineNumbers(newLineNumbers);\n    };\n\n    const updateHistory = (json) => {\n        const newEntry = { json, timestamp: new Date().toLocaleString() };\n        const newHistory = [newEntry, ...history].slice(0, 50); // Keep only the latest 50 entries\n        setHistory(newHistory);\n        sessionStorage.setItem('jsonHistory', JSON.stringify(newHistory));\n    };\n\n    const toggleHistory = () => {\n        setHistoryVisible(!historyVisible);\n    };\n\n    return (\n        <div>\n            <h1>JSON Tool</h1>\n            <div>\n                <button onClick={validateJson}>Validate and Expand JSON</button>\n                <button onClick={compressJson}>Compress JSON</button>\n                <button onClick={clearJson}>Clear</button>\n                <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n            </div>\n            <textarea\n                value={jsonInput}\n                onChange={handleInputChange}\n                rows=\"10\"\n                cols=\"50\"\n                placeholder=\"Enter JSON here...\"\n            />\n            {/* <div>\n                <button onClick={validateJson}>Validate and Expand JSON</button>\n                <button onClick={compressJson}>Compress JSON</button>\n                <button onClick={clearJson}>Clear</button>\n                <button onClick={toggleHistory}>{historyVisible ? 'Hide History' : 'Show History'}</button>\n            </div> */}\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            {historyVisible && (\n                <ul>\n                    {history.map((entry, index) => (\n                        <li key={index}>{entry.timestamp}: {entry.json}</li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n}\n\nexport default JsonTool;\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}